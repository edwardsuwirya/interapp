/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gelael.interapp.form;

import com.gelael.interapp.domain.ExtPath;
import com.gelael.interapp.domain.IRepository;
import com.gelael.interapp.domain.OldMasterItem;
import com.gelael.interapp.domain.OldMasterItemRepo;
import com.gelael.interapp.service.DateService;
import com.hexiong.jdbf.DBFWriter;
import com.hexiong.jdbf.JDBFException;
import com.hexiong.jdbf.JDBField;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author edo
 */
@Component
public class FrmMain extends javax.swing.JFrame {
    
    @Autowired
    IRepository oldMasterItemRepo;
    
    @Autowired
    ExtPath extPath;
    
    private boolean isSuccessMdw = false;
    private DateService ds = new DateService();

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        super("Aplikasi Interface Gelael");
        initComponents();
        setLocationRelativeTo(null);
        try {
            MaskFormatter mf = new MaskFormatter("##/##/####");
            mf.setValidCharacters("0123456789");
            txtDateUpd.setFormatterFactory(new DefaultFormatterFactory(mf));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Kesalahan Format Tanggal");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGetDataHO = new javax.swing.JButton();
        btnExtractDBF = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextPane();
        txtDateUpd = new javax.swing.JFormattedTextField();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnGetDataHO.setText("Ambil Data Master Dari HO");
        btnGetDataHO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDataHOActionPerformed(evt);
            }
        });

        btnExtractDBF.setText("Ekspor DBF");
        btnExtractDBF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractDBFActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(txtInfo);

        txtDateUpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateUpdActionPerformed(evt);
            }
        });

        btnExit.setText("Keluar");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setText("<html>Tanggal Update <br/> (dd/MM/yyyy)</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExtractDBF))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(txtDateUpd, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGetDataHO, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDateUpd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetDataHO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExtractDBF)
                    .addComponent(btnExit))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetDataHOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDataHOActionPerformed
        // TODO add your handling code here:
        try {
            String dateReq = txtDateUpd.getText();
            String dateReqSql = ds.convertDateRequest(dateReq);
            txtDateUpd.setEditable(false);
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<OldMasterItem[]> re = restTemplate.getForEntity(extPath.getMdwUrl() + "/master/olditem/" + extPath.getOutletCode() + "/" + dateReqSql, OldMasterItem[].class);
            OldMasterItem[] omi = re.getBody();
            Map[] params = new Map[omi.length];
            String info = "";
            for (int i = 0; i < omi.length; i++) {
                Map param = new HashMap();
                OldMasterItem o = omi[i];
                String s = o.getFMKODE() + "\t" + o.getFMMERK() + "\t" + o.getFMNAMA() + "\n";
                info = info + s;
                param.put("oc", o.getOUTLET_CODE());
                param.put("td", o.getTRANS_DATE());
                param.put("FMKODE", o.getFMKODE());
                param.put("FMBARC", o.getFMBARC());
                param.put("FMPLUS", o.getFMPLUS());
                param.put("FMMERK", o.getFMMERK());
                param.put("FMNAMA", o.getFMNAMA());
                param.put("FMSING", o.getFMSING());
                param.put("FMKKEL", o.getFMKKEL());
                param.put("FMKGRP", o.getFMKGRP());
                param.put("FMKDEP", o.getFMKGRP());
                param.put("FMKSAT", o.getFMKSAT());
                param.put("FMISIS", o.getFMISIS());
                param.put("FMPRFT", o.getFMPRFT());
                param.put("FLPRFT", o.getFLPRFT());
                param.put("FMFBKP", o.getFMFBKP());
                param.put("FMJUAL", o.getFMJUAL());
                param.put("FLJUAL", o.getFLJUAL());
                param.put("FMDTJN", o.getFMDTJN());
                param.put("FMRHRG", o.getFMRHRG());
                param.put("FMFDPT", o.getFMFDPT());
                param.put("FMFCRS", o.getFMFCRS());
                param.put("FMDVPO", o.getFMDVPO());
                param.put("FMBTDK", o.getFMBTDK());
                param.put("FMTGUP", o.getFMTGUP());
                param.put("FMUSER", o.getFMUSER());
                param.put("FMTGIN", o.getFMTGIN());
                param.put("FMTGDC", o.getFMTGDC());
                param.put("FMTGAK", o.getFMTGAK());
                param.put("FMMDML", o.getFMMDML());
                param.put("FMTMU1", o.getFMTMU1());
                param.put("FMTMU2", o.getFMTMU2());
                param.put("FMTHJ1", o.getFMTHJ1());
                param.put("FMTHJ2", o.getFMTHJ2());
                params[i] = param;
            }
            
            if (info.length() > 0) {
                Map paramDel = new HashMap();
                paramDel.put("oc", extPath.getOutletCode());
                paramDel.put("td", dateReqSql);
                
                oldMasterItemRepo.cleanUpdateBatch(
                        OldMasterItemRepo.DEL_OLD_MASTER_ITEM,
                        paramDel,
                        OldMasterItemRepo.INSERT_OLD_MASTER_ITEM,
                        params);
                txtInfo.setText(info);
                JOptionPane.showMessageDialog(null, "Ambil Data Dari HO Berhasil, Silahkan melanjutkan Ekspor DBF");
                isSuccessMdw = true;
            } else {
                txtDateUpd.setEditable(true);
                txtInfo.setText("Tidak ditemukan update data untuk tanggal yang diminta");
                isSuccessMdw = false;
            }
        } catch (Exception ex) {
            System.out.println(ex);
            txtDateUpd.setEditable(true);
            isSuccessMdw = false;
            JOptionPane.showMessageDialog(null, "Ambil Data Dari HO Gagal");
        }
    }//GEN-LAST:event_btnGetDataHOActionPerformed

    private void btnExtractDBFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractDBFActionPerformed
        if (isSuccessMdw) {
            try {
                // TODO add your handling code here:
                JDBField[] fields = {
                    new JDBField("FMKODE", 'C', 7, 0),
                    new JDBField("FMBARC", 'C', 13, 0),
                    new JDBField("FMPLUS", 'C', 15, 0),
                    new JDBField("FMMERK", 'C', 15, 0),
                    new JDBField("FMNAMA", 'C', 30, 0),
                    new JDBField("FMSING", 'C', 28, 0),
                    new JDBField("FMKKEL", 'C', 2, 0),
                    new JDBField("FMKGRP", 'C', 1, 0),
                    new JDBField("FMKDEP", 'C', 2, 0),
                    new JDBField("FMKSAT", 'C', 3, 0),
                    new JDBField("FMISIS", 'N', 4, 0),
                    new JDBField("FMPRFT", 'N', 6, 2),
                    new JDBField("FLPRFT", 'N', 6, 2),
                    new JDBField("FMFBKP", 'C', 1, 0),
                    new JDBField("FMJUAL", 'N', 7, 0),
                    new JDBField("FLJUAL", 'N', 7, 0),
                    new JDBField("FMDTJN", 'C', 2, 0),
                    new JDBField("FMRHRG", 'C', 1, 0),
                    new JDBField("FMFDPT", 'C', 1, 0),
                    new JDBField("FMFCRS", 'C', 1, 0),
                    new JDBField("FMDVPO", 'C', 1, 0),
                    new JDBField("FMBTDK", 'C', 1, 0),
                    new JDBField("FMTGUP", 'D', 8, 0),
                    new JDBField("FMUSER", 'C', 15, 0),
                    new JDBField("FMTGIN", 'D', 8, 0),
                    new JDBField("FMTGDC", 'D', 8, 0),
                    new JDBField("FMTGAK", 'D', 8, 0),
                    new JDBField("FMMDML", 'C', 20, 0),
                    new JDBField("FMTMU1", 'D', 8, 0),
                    new JDBField("FMTMU2", 'D', 8, 0),
                    new JDBField("FMTHJ1", 'D', 8, 0),
                    new JDBField("FMTHJ2", 'D', 8, 0)
                };
                
                String dateReq = txtDateUpd.getText();
                String dateReqSql = ds.convertDateRequest(dateReq);
                String dateReqDBF = ds.convertDateDBF(dateReq);
                System.out.println(dateReqDBF);
                
                String fileNameDBF = "/A" + dateReqDBF + ".DBF";
                DBFWriter dbfwriter = new DBFWriter(extPath.getDbfTempPath() + fileNameDBF, fields);
                
                Map param = new HashMap();
                param.put("oc", extPath.getOutletCode());
                param.put("td", dateReqSql);
                
                List<OldMasterItem> items = oldMasterItemRepo.findMany(OldMasterItemRepo.QRY_OLD_MASTER_ITEM, param, new BeanPropertyRowMapper(OldMasterItem.class));
                
                for (Iterator<OldMasterItem> iterator = items.iterator(); iterator.hasNext();) {
                    OldMasterItem o = iterator.next();
                    dbfwriter.addRecord(new Object[]{
                        o.getFMKODE(),
                        o.getFMBARC(),
                        o.getFMPLUS(),
                        o.getFMMERK(),
                        o.getFMNAMA(),
                        o.getFMSING(),
                        o.getFMKKEL(),
                        o.getFMKGRP(),
                        o.getFMKGRP(),
                        o.getFMKSAT(),
                        new Integer(o.getFMISIS()),
                        new Double(o.getFMPRFT()),
                        new Double(o.getFLPRFT()),
                        o.getFMFBKP(),
                        new Integer(o.getFMJUAL()),
                        new Integer(o.getFLJUAL()),
                        o.getFMDTJN(),
                        o.getFMRHRG(),
                        o.getFMFDPT(),
                        o.getFMFCRS(),
                        o.getFMDVPO(),
                        o.getFMBTDK(),
                        ds.convertStringDate(o.getFMTGUP()),
                        o.getFMUSER(),
                        ds.convertStringDate(o.getFMTGIN()),
                        ds.convertStringDate(o.getFMTGDC()),
                        ds.convertStringDate(o.getFMTGAK()),
                        o.getFMMDML(),
                        ds.convertStringDate(o.getFMTMU1()),
                        ds.convertStringDate(o.getFMTMU2()),
                        ds.convertStringDate(o.getFMTHJ1()),
                        ds.convertStringDate(o.getFMTHJ2())
                    }
                    );
                }
                
                dbfwriter.close();
                JOptionPane.showMessageDialog(null, "Ekspor DBF Sukses");
            } catch (JDBFException ex) {
                System.out.println(ex);
                JOptionPane.showMessageDialog(null, "Ekspor DBF Gagal");
            } finally {
                txtDateUpd.setEditable(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Silahkan melakukan pengambilan data dari HO terlebih dahulu");
        }
    }//GEN-LAST:event_btnExtractDBFActionPerformed

    private void txtDateUpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateUpdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateUpdActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExtractDBF;
    private javax.swing.JButton btnGetDataHO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JFormattedTextField txtDateUpd;
    private javax.swing.JTextPane txtInfo;
    // End of variables declaration//GEN-END:variables
}
